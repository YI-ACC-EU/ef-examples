// <auto-generated />
using System;
using AirportExample.Repositories.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AirportExample.Migrations
{
    [DbContext(typeof(AirlinesDbContext))]
    [Migration("20230418170444_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AirportExample.Models.Entities.Airport", b =>
                {
                    b.Property<string>("AirportCode")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<string>("AirportName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("ContactNo")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.HasKey("AirportCode")
                        .HasName("PK_Airport");

                    b.HasIndex("CountryCode");

                    b.ToTable("Airport", (string)null);
                });

            modelBuilder.Entity("AirportExample.Models.Entities.Country", b =>
                {
                    b.Property<string>("CountryCode")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CountryCode")
                        .HasName("PK_Country");

                    b.HasIndex(new[] { "CountryName" }, "UK_CountryName")
                        .IsUnique();

                    b.ToTable("Country", (string)null);

                    b.HasData(
                        new
                        {
                            CountryCode = "AUS",
                            CountryName = "Australia"
                        },
                        new
                        {
                            CountryCode = "AUT",
                            CountryName = "Austria"
                        },
                        new
                        {
                            CountryCode = "BEL",
                            CountryName = "Belgium"
                        },
                        new
                        {
                            CountryCode = "BRA",
                            CountryName = "Brazil"
                        },
                        new
                        {
                            CountryCode = "CAN",
                            CountryName = "Canada"
                        },
                        new
                        {
                            CountryCode = "CHN",
                            CountryName = "China"
                        },
                        new
                        {
                            CountryCode = "ENG",
                            CountryName = "England"
                        },
                        new
                        {
                            CountryCode = "GER",
                            CountryName = "Germany"
                        },
                        new
                        {
                            CountryCode = "NPl",
                            CountryName = "Nepal"
                        },
                        new
                        {
                            CountryCode = "NZL",
                            CountryName = "New Zealand"
                        },
                        new
                        {
                            CountryCode = "POR",
                            CountryName = "Portugal"
                        },
                        new
                        {
                            CountryCode = "ESP",
                            CountryName = "Spain"
                        },
                        new
                        {
                            CountryCode = "SWE",
                            CountryName = "Sweden"
                        },
                        new
                        {
                            CountryCode = "UAE",
                            CountryName = "United Arab Emirates"
                        },
                        new
                        {
                            CountryCode = "USA",
                            CountryName = "United States of America"
                        });
                });

            modelBuilder.Entity("AirportExample.Models.Entities.Flight", b =>
                {
                    b.Property<string>("FlightNo")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<string>("FlightArriveFromId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<string>("FlightDepartToId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.HasKey("FlightNo")
                        .HasName("PK_FlightNo");

                    b.HasIndex("FlightArriveFromId");

                    b.HasIndex("FlightDepartToId");

                    b.ToTable("Flight", (string)null);
                });

            modelBuilder.Entity("AirportExample.Models.Entities.FlightAttendant", b =>
                {
                    b.Property<int>("AttendantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AttendantID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttendantId"));

                    b.Property<DateTime>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("MentorId")
                        .HasColumnType("int")
                        .HasColumnName("MentorID");

                    b.HasKey("AttendantId")
                        .HasName("PK_FA_AttendantID");

                    b.HasIndex("MentorId");

                    b.ToTable("FlightAttendant", (string)null);
                });

            modelBuilder.Entity("AirportExample.Models.Entities.FlightInstance", b =>
                {
                    b.Property<int>("InstanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InstanceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstanceId"));

                    b.Property<int>("CoPilotAboardId")
                        .HasColumnType("int")
                        .HasColumnName("CoPilotAboardID");

                    b.Property<DateTime>("DateTimeArrive")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateTimeLeave")
                        .HasColumnType("datetime");

                    b.Property<string>("FlightNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("FsmAttendantId")
                        .HasColumnType("int")
                        .HasColumnName("FSM_AttendantID");

                    b.Property<int>("PilotAboardId")
                        .HasColumnType("int")
                        .HasColumnName("PilotAboardID");

                    b.Property<int>("PlaneId")
                        .HasColumnType("int")
                        .HasColumnName("PlaneID");

                    b.HasKey("InstanceId")
                        .HasName("InstanceId_pk");

                    b.HasIndex("CoPilotAboardId");

                    b.HasIndex("FlightNo");

                    b.HasIndex("FsmAttendantId");

                    b.HasIndex("PilotAboardId");

                    b.HasIndex("PlaneId");

                    b.ToTable("FlightInstance", (string)null);
                });

            modelBuilder.Entity("AirportExample.Models.Entities.Pilot", b =>
                {
                    b.Property<int>("PilotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PilotID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PilotId"));

                    b.Property<DateTime>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<short>("HoursFlown")
                        .HasColumnType("smallint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PilotId")
                        .HasName("PK_P_PilotId");

                    b.ToTable("Pilot", (string)null);
                });

            modelBuilder.Entity("AirportExample.Models.Entities.PlaneDetail", b =>
                {
                    b.Property<int>("PlaneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PlaneID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlaneId"));

                    b.Property<short>("BuiltYear")
                        .HasColumnType("smallint");

                    b.Property<short>("EcoCapacity")
                        .HasColumnType("smallint");

                    b.Property<short>("FirstClassCapacity")
                        .HasColumnType("smallint");

                    b.Property<string>("ModelNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("RegistrationNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("PlaneId")
                        .HasName("PK_PD_PlaneId");

                    b.HasIndex("ModelNumber");

                    b.HasIndex(new[] { "RegistrationNo" }, "UK_RegNO")
                        .IsUnique();

                    b.ToTable("PlaneDetail", (string)null);

                    b.HasData(
                        new
                        {
                            PlaneId = 1,
                            BuiltYear = (short)1989,
                            EcoCapacity = (short)50,
                            FirstClassCapacity = (short)50,
                            ModelNumber = "A390",
                            RegistrationNo = "AU-1989"
                        },
                        new
                        {
                            PlaneId = 2,
                            BuiltYear = (short)2000,
                            EcoCapacity = (short)200,
                            FirstClassCapacity = (short)100,
                            ModelNumber = "A380",
                            RegistrationNo = "AU-2000"
                        },
                        new
                        {
                            PlaneId = 3,
                            BuiltYear = (short)1970,
                            EcoCapacity = (short)350,
                            FirstClassCapacity = (short)200,
                            ModelNumber = "A300",
                            RegistrationNo = "AU-1970"
                        },
                        new
                        {
                            PlaneId = 4,
                            BuiltYear = (short)1880,
                            EcoCapacity = (short)420,
                            FirstClassCapacity = (short)310,
                            ModelNumber = "A340",
                            RegistrationNo = "AU-1880"
                        },
                        new
                        {
                            PlaneId = 5,
                            BuiltYear = (short)1990,
                            EcoCapacity = (short)230,
                            FirstClassCapacity = (short)110,
                            ModelNumber = "A390",
                            RegistrationNo = "AU-1990"
                        },
                        new
                        {
                            PlaneId = 6,
                            BuiltYear = (short)2001,
                            EcoCapacity = (short)120,
                            FirstClassCapacity = (short)40,
                            ModelNumber = "737",
                            RegistrationNo = "BO-2001"
                        },
                        new
                        {
                            PlaneId = 7,
                            BuiltYear = (short)1990,
                            EcoCapacity = (short)450,
                            FirstClassCapacity = (short)155,
                            ModelNumber = "777",
                            RegistrationNo = "BO-1990"
                        },
                        new
                        {
                            PlaneId = 8,
                            BuiltYear = (short)2002,
                            EcoCapacity = (short)244,
                            FirstClassCapacity = (short)121,
                            ModelNumber = "779",
                            RegistrationNo = "BO-2002"
                        },
                        new
                        {
                            PlaneId = 9,
                            BuiltYear = (short)2005,
                            EcoCapacity = (short)340,
                            FirstClassCapacity = (short)195,
                            ModelNumber = "787",
                            RegistrationNo = "BO-2005"
                        },
                        new
                        {
                            PlaneId = 10,
                            BuiltYear = (short)2005,
                            EcoCapacity = (short)140,
                            FirstClassCapacity = (short)95,
                            ModelNumber = "787",
                            RegistrationNo = "BO-2005-1"
                        });
                });

            modelBuilder.Entity("AirportExample.Models.Entities.PlaneModel", b =>
                {
                    b.Property<string>("ModelNumber")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<short>("CruiseSpeed")
                        .HasColumnType("smallint");

                    b.Property<string>("ManufacturerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<short>("PlaneRange")
                        .HasColumnType("smallint");

                    b.HasKey("ModelNumber")
                        .HasName("PK_PM_ModelN");

                    b.ToTable("PlaneModel", (string)null);

                    b.HasData(
                        new
                        {
                            ModelNumber = "737",
                            CruiseSpeed = (short)780,
                            ManufacturerName = "Boeing",
                            PlaneRange = (short)5600
                        },
                        new
                        {
                            ModelNumber = "777",
                            CruiseSpeed = (short)892,
                            ManufacturerName = "Boeing",
                            PlaneRange = (short)10000
                        },
                        new
                        {
                            ModelNumber = "779",
                            CruiseSpeed = (short)922,
                            ManufacturerName = "Boeing",
                            PlaneRange = (short)17000
                        },
                        new
                        {
                            ModelNumber = "787",
                            CruiseSpeed = (short)903,
                            ManufacturerName = "Boeing",
                            PlaneRange = (short)15000
                        },
                        new
                        {
                            ModelNumber = "A300",
                            CruiseSpeed = (short)871,
                            ManufacturerName = "Airbus",
                            PlaneRange = (short)13450
                        },
                        new
                        {
                            ModelNumber = "A340",
                            CruiseSpeed = (short)881,
                            ManufacturerName = "Airbus",
                            PlaneRange = (short)12400
                        },
                        new
                        {
                            ModelNumber = "A380",
                            CruiseSpeed = (short)900,
                            ManufacturerName = "Airbus",
                            PlaneRange = (short)15700
                        },
                        new
                        {
                            ModelNumber = "A390",
                            CruiseSpeed = (short)1081,
                            ManufacturerName = "Airbus",
                            PlaneRange = (short)17400
                        });
                });

            modelBuilder.Entity("InstanceAttendant", b =>
                {
                    b.Property<int>("InstanceId")
                        .HasColumnType("int")
                        .HasColumnName("InstanceID");

                    b.Property<int>("AttendantId")
                        .HasColumnType("int")
                        .HasColumnName("AttendantID");

                    b.HasKey("InstanceId", "AttendantId")
                        .HasName("PK_InstanceAttendantID");

                    b.HasIndex("AttendantId");

                    b.ToTable("InstanceAttendant", (string)null);
                });

            modelBuilder.Entity("PlanePilot", b =>
                {
                    b.Property<int>("PilotId")
                        .HasColumnType("int")
                        .HasColumnName("PilotID");

                    b.Property<string>("PlaneModel")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("PilotId", "PlaneModel")
                        .HasName("PK_PlanePilot");

                    b.HasIndex("PlaneModel");

                    b.ToTable("PlanePilot", (string)null);
                });

            modelBuilder.Entity("AirportExample.Models.Entities.Airport", b =>
                {
                    b.HasOne("AirportExample.Models.Entities.Country", "Country")
                        .WithMany("Airports")
                        .HasForeignKey("CountryCode")
                        .IsRequired()
                        .HasConstraintName("FK_CountryCode");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AirportExample.Models.Entities.Flight", b =>
                {
                    b.HasOne("AirportExample.Models.Entities.Airport", "ArriveFrom")
                        .WithMany("FlightArriveFrom")
                        .HasForeignKey("FlightArriveFromId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_F_FlightArriveFrom");

                    b.HasOne("AirportExample.Models.Entities.Airport", "DepartTo")
                        .WithMany("FlightDepartTo")
                        .HasForeignKey("FlightDepartToId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_F_FlightDepartTo");

                    b.Navigation("ArriveFrom");

                    b.Navigation("DepartTo");
                });

            modelBuilder.Entity("AirportExample.Models.Entities.FlightAttendant", b =>
                {
                    b.HasOne("AirportExample.Models.Entities.FlightAttendant", "Mentor")
                        .WithMany("InverseMentor")
                        .HasForeignKey("MentorId")
                        .HasConstraintName("FK_MentorID");

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("AirportExample.Models.Entities.FlightInstance", b =>
                {
                    b.HasOne("AirportExample.Models.Entities.Pilot", "CoPilotAboard")
                        .WithMany("FlightInstanceCoPilotAboards")
                        .HasForeignKey("CoPilotAboardId")
                        .IsRequired()
                        .HasConstraintName("FK_FI_CoPilotAboardId");

                    b.HasOne("AirportExample.Models.Entities.Flight", "Flight")
                        .WithMany("FlightInstances")
                        .HasForeignKey("FlightNo")
                        .IsRequired()
                        .HasConstraintName("FK_FI_FlightNo");

                    b.HasOne("AirportExample.Models.Entities.FlightAttendant", "FsmAttendant")
                        .WithMany("FlightInstances")
                        .HasForeignKey("FsmAttendantId")
                        .IsRequired()
                        .HasConstraintName("FK_FI_FSMAttendantID");

                    b.HasOne("AirportExample.Models.Entities.Pilot", "PilotAboard")
                        .WithMany("FlightInstancePilotAboards")
                        .HasForeignKey("PilotAboardId")
                        .IsRequired()
                        .HasConstraintName("FK_FI_PilotAboardId");

                    b.HasOne("AirportExample.Models.Entities.PlaneDetail", "Plane")
                        .WithMany("FlightInstances")
                        .HasForeignKey("PlaneId")
                        .IsRequired()
                        .HasConstraintName("FK_FI_PlaneID");

                    b.Navigation("CoPilotAboard");

                    b.Navigation("Flight");

                    b.Navigation("FsmAttendant");

                    b.Navigation("PilotAboard");

                    b.Navigation("Plane");
                });

            modelBuilder.Entity("AirportExample.Models.Entities.PlaneDetail", b =>
                {
                    b.HasOne("AirportExample.Models.Entities.PlaneModel", "PlaneModel")
                        .WithMany("PlaneDetails")
                        .HasForeignKey("ModelNumber")
                        .IsRequired()
                        .HasConstraintName("FK_ModelN");

                    b.Navigation("PlaneModel");
                });

            modelBuilder.Entity("InstanceAttendant", b =>
                {
                    b.HasOne("AirportExample.Models.Entities.FlightAttendant", null)
                        .WithMany()
                        .HasForeignKey("AttendantId")
                        .IsRequired()
                        .HasConstraintName("FK_IA_AttendantId");

                    b.HasOne("AirportExample.Models.Entities.FlightInstance", null)
                        .WithMany()
                        .HasForeignKey("InstanceId")
                        .IsRequired()
                        .HasConstraintName("FK_IA_InstanceId");
                });

            modelBuilder.Entity("PlanePilot", b =>
                {
                    b.HasOne("AirportExample.Models.Entities.Pilot", null)
                        .WithMany()
                        .HasForeignKey("PilotId")
                        .IsRequired()
                        .HasConstraintName("PK_PilotID");

                    b.HasOne("AirportExample.Models.Entities.PlaneModel", null)
                        .WithMany()
                        .HasForeignKey("PlaneModel")
                        .IsRequired()
                        .HasConstraintName("PK_PlaneModel");
                });

            modelBuilder.Entity("AirportExample.Models.Entities.Airport", b =>
                {
                    b.Navigation("FlightArriveFrom");

                    b.Navigation("FlightDepartTo");
                });

            modelBuilder.Entity("AirportExample.Models.Entities.Country", b =>
                {
                    b.Navigation("Airports");
                });

            modelBuilder.Entity("AirportExample.Models.Entities.Flight", b =>
                {
                    b.Navigation("FlightInstances");
                });

            modelBuilder.Entity("AirportExample.Models.Entities.FlightAttendant", b =>
                {
                    b.Navigation("FlightInstances");

                    b.Navigation("InverseMentor");
                });

            modelBuilder.Entity("AirportExample.Models.Entities.Pilot", b =>
                {
                    b.Navigation("FlightInstanceCoPilotAboards");

                    b.Navigation("FlightInstancePilotAboards");
                });

            modelBuilder.Entity("AirportExample.Models.Entities.PlaneDetail", b =>
                {
                    b.Navigation("FlightInstances");
                });

            modelBuilder.Entity("AirportExample.Models.Entities.PlaneModel", b =>
                {
                    b.Navigation("PlaneDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
